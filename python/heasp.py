# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_heasp', [dirname(__file__)])
        except ImportError:
            import _heasp
            return _heasp
        if fp is not None:
            try:
                _mod = imp.load_module('_heasp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _heasp = swig_import_helper()
    del swig_import_helper
else:
    import _heasp
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

OK = _heasp.OK
NoSuchFile = _heasp.NoSuchFile
NoData = _heasp.NoData
NoChannelData = _heasp.NoChannelData
NoStatError = _heasp.NoStatError
CannotCreate = _heasp.CannotCreate
NoEnergLo = _heasp.NoEnergLo
NoEnergHi = _heasp.NoEnergHi
NoSpecresp = _heasp.NoSpecresp
NoEboundsExt = _heasp.NoEboundsExt
NoEmin = _heasp.NoEmin
NoEmax = _heasp.NoEmax
NoMatrixExt = _heasp.NoMatrixExt
NoNgrp = _heasp.NoNgrp
NoFchan = _heasp.NoFchan
NoNchan = _heasp.NoNchan
NoMatrix = _heasp.NoMatrix
CannotCreateMatrixExt = _heasp.CannotCreateMatrixExt
CannotCreateEboundsExt = _heasp.CannotCreateEboundsExt
InconsistentGrouping = _heasp.InconsistentGrouping
InconsistentEnergies = _heasp.InconsistentEnergies
InconsistentChannels = _heasp.InconsistentChannels
InconsistentUnits = _heasp.InconsistentUnits
UnknownXUnits = _heasp.UnknownXUnits
UnknownYUnits = _heasp.UnknownYUnits
class SwigPyIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _heasp.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _heasp.SwigPyIterator_value(self)
    def incr(self, n = 1): return _heasp.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _heasp.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _heasp.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _heasp.SwigPyIterator_equal(self, *args)
    def copy(self): return _heasp.SwigPyIterator_copy(self)
    def next(self): return _heasp.SwigPyIterator_next(self)
    def __next__(self): return _heasp.SwigPyIterator___next__(self)
    def previous(self): return _heasp.SwigPyIterator_previous(self)
    def advance(self, *args): return _heasp.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _heasp.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _heasp.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _heasp.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _heasp.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _heasp.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _heasp.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _heasp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _heasp.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _heasp.IntVector___nonzero__(self)
    def __bool__(self): return _heasp.IntVector___bool__(self)
    def __len__(self): return _heasp.IntVector___len__(self)
    def pop(self): return _heasp.IntVector_pop(self)
    def __getslice__(self, *args): return _heasp.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _heasp.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _heasp.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _heasp.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _heasp.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _heasp.IntVector___setitem__(self, *args)
    def append(self, *args): return _heasp.IntVector_append(self, *args)
    def empty(self): return _heasp.IntVector_empty(self)
    def size(self): return _heasp.IntVector_size(self)
    def clear(self): return _heasp.IntVector_clear(self)
    def swap(self, *args): return _heasp.IntVector_swap(self, *args)
    def get_allocator(self): return _heasp.IntVector_get_allocator(self)
    def begin(self): return _heasp.IntVector_begin(self)
    def end(self): return _heasp.IntVector_end(self)
    def rbegin(self): return _heasp.IntVector_rbegin(self)
    def rend(self): return _heasp.IntVector_rend(self)
    def pop_back(self): return _heasp.IntVector_pop_back(self)
    def erase(self, *args): return _heasp.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _heasp.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _heasp.IntVector_push_back(self, *args)
    def front(self): return _heasp.IntVector_front(self)
    def back(self): return _heasp.IntVector_back(self)
    def assign(self, *args): return _heasp.IntVector_assign(self, *args)
    def resize(self, *args): return _heasp.IntVector_resize(self, *args)
    def insert(self, *args): return _heasp.IntVector_insert(self, *args)
    def reserve(self, *args): return _heasp.IntVector_reserve(self, *args)
    def capacity(self): return _heasp.IntVector_capacity(self)
    __swig_destroy__ = _heasp.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _heasp.IntVector_swigregister
IntVector_swigregister(IntVector)

class floatVector:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, floatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _heasp.floatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _heasp.floatVector___nonzero__(self)
    def __bool__(self): return _heasp.floatVector___bool__(self)
    def __len__(self): return _heasp.floatVector___len__(self)
    def pop(self): return _heasp.floatVector_pop(self)
    def __getslice__(self, *args): return _heasp.floatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _heasp.floatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _heasp.floatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _heasp.floatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _heasp.floatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _heasp.floatVector___setitem__(self, *args)
    def append(self, *args): return _heasp.floatVector_append(self, *args)
    def empty(self): return _heasp.floatVector_empty(self)
    def size(self): return _heasp.floatVector_size(self)
    def clear(self): return _heasp.floatVector_clear(self)
    def swap(self, *args): return _heasp.floatVector_swap(self, *args)
    def get_allocator(self): return _heasp.floatVector_get_allocator(self)
    def begin(self): return _heasp.floatVector_begin(self)
    def end(self): return _heasp.floatVector_end(self)
    def rbegin(self): return _heasp.floatVector_rbegin(self)
    def rend(self): return _heasp.floatVector_rend(self)
    def pop_back(self): return _heasp.floatVector_pop_back(self)
    def erase(self, *args): return _heasp.floatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _heasp.new_floatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _heasp.floatVector_push_back(self, *args)
    def front(self): return _heasp.floatVector_front(self)
    def back(self): return _heasp.floatVector_back(self)
    def assign(self, *args): return _heasp.floatVector_assign(self, *args)
    def resize(self, *args): return _heasp.floatVector_resize(self, *args)
    def insert(self, *args): return _heasp.floatVector_insert(self, *args)
    def reserve(self, *args): return _heasp.floatVector_reserve(self, *args)
    def capacity(self): return _heasp.floatVector_capacity(self)
    __swig_destroy__ = _heasp.delete_floatVector
    __del__ = lambda self : None;
floatVector_swigregister = _heasp.floatVector_swigregister
floatVector_swigregister(floatVector)

class pha:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pha, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pha, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FirstChannel"] = _heasp.pha_FirstChannel_set
    __swig_getmethods__["FirstChannel"] = _heasp.pha_FirstChannel_get
    __swig_setmethods__["Pha"] = _heasp.pha_Pha_set
    __swig_getmethods__["Pha"] = _heasp.pha_Pha_get
    __swig_setmethods__["StatError"] = _heasp.pha_StatError_set
    __swig_getmethods__["StatError"] = _heasp.pha_StatError_get
    __swig_setmethods__["SysError"] = _heasp.pha_SysError_set
    __swig_getmethods__["SysError"] = _heasp.pha_SysError_get
    __swig_setmethods__["Channel"] = _heasp.pha_Channel_set
    __swig_getmethods__["Channel"] = _heasp.pha_Channel_get
    __swig_setmethods__["Quality"] = _heasp.pha_Quality_set
    __swig_getmethods__["Quality"] = _heasp.pha_Quality_get
    __swig_setmethods__["Group"] = _heasp.pha_Group_set
    __swig_getmethods__["Group"] = _heasp.pha_Group_get
    __swig_setmethods__["AreaScaling"] = _heasp.pha_AreaScaling_set
    __swig_getmethods__["AreaScaling"] = _heasp.pha_AreaScaling_get
    __swig_setmethods__["BackScaling"] = _heasp.pha_BackScaling_set
    __swig_getmethods__["BackScaling"] = _heasp.pha_BackScaling_get
    __swig_setmethods__["Exposure"] = _heasp.pha_Exposure_set
    __swig_getmethods__["Exposure"] = _heasp.pha_Exposure_get
    __swig_setmethods__["CorrectionScaling"] = _heasp.pha_CorrectionScaling_set
    __swig_getmethods__["CorrectionScaling"] = _heasp.pha_CorrectionScaling_get
    __swig_setmethods__["DetChans"] = _heasp.pha_DetChans_set
    __swig_getmethods__["DetChans"] = _heasp.pha_DetChans_get
    __swig_setmethods__["Poisserr"] = _heasp.pha_Poisserr_set
    __swig_getmethods__["Poisserr"] = _heasp.pha_Poisserr_get
    __swig_setmethods__["Datatype"] = _heasp.pha_Datatype_set
    __swig_getmethods__["Datatype"] = _heasp.pha_Datatype_get
    __swig_setmethods__["PHAVersion"] = _heasp.pha_PHAVersion_set
    __swig_getmethods__["PHAVersion"] = _heasp.pha_PHAVersion_get
    __swig_setmethods__["Spectrumtype"] = _heasp.pha_Spectrumtype_set
    __swig_getmethods__["Spectrumtype"] = _heasp.pha_Spectrumtype_get
    __swig_setmethods__["ResponseFile"] = _heasp.pha_ResponseFile_set
    __swig_getmethods__["ResponseFile"] = _heasp.pha_ResponseFile_get
    __swig_setmethods__["AncillaryFile"] = _heasp.pha_AncillaryFile_set
    __swig_getmethods__["AncillaryFile"] = _heasp.pha_AncillaryFile_get
    __swig_setmethods__["BackgroundFile"] = _heasp.pha_BackgroundFile_set
    __swig_getmethods__["BackgroundFile"] = _heasp.pha_BackgroundFile_get
    __swig_setmethods__["CorrectionFile"] = _heasp.pha_CorrectionFile_set
    __swig_getmethods__["CorrectionFile"] = _heasp.pha_CorrectionFile_get
    __swig_setmethods__["FluxUnits"] = _heasp.pha_FluxUnits_set
    __swig_getmethods__["FluxUnits"] = _heasp.pha_FluxUnits_get
    __swig_setmethods__["ChannelType"] = _heasp.pha_ChannelType_set
    __swig_getmethods__["ChannelType"] = _heasp.pha_ChannelType_get
    __swig_setmethods__["Telescope"] = _heasp.pha_Telescope_set
    __swig_getmethods__["Telescope"] = _heasp.pha_Telescope_get
    __swig_setmethods__["Instrument"] = _heasp.pha_Instrument_set
    __swig_getmethods__["Instrument"] = _heasp.pha_Instrument_get
    __swig_setmethods__["Detector"] = _heasp.pha_Detector_set
    __swig_getmethods__["Detector"] = _heasp.pha_Detector_get
    __swig_setmethods__["Filter"] = _heasp.pha_Filter_set
    __swig_getmethods__["Filter"] = _heasp.pha_Filter_get
    __swig_setmethods__["Datamode"] = _heasp.pha_Datamode_set
    __swig_getmethods__["Datamode"] = _heasp.pha_Datamode_get
    __swig_setmethods__["XSPECFilter"] = _heasp.pha_XSPECFilter_set
    __swig_getmethods__["XSPECFilter"] = _heasp.pha_XSPECFilter_get
    def __init__(self): 
        this = _heasp.new_pha()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_pha
    __del__ = lambda self : None;
    def read(self, *args): return _heasp.pha_read(self, *args)
    def NumberChannels(self): return _heasp.pha_NumberChannels(self)
    def disp(self): return _heasp.pha_disp(self)
    def clear(self): return _heasp.pha_clear(self)
    def check(self): return _heasp.pha_check(self)
    def write(self, *args): return _heasp.pha_write(self, *args)
    def __imul__(self, *args): return _heasp.pha___imul__(self, *args)
    def __iadd__(self, *args): return _heasp.pha___iadd__(self, *args)
    def checkCompatibility(self, *args): return _heasp.pha_checkCompatibility(self, *args)
    def setGrouping(self, *args): return _heasp.pha_setGrouping(self, *args)
    def rebinChannels(self, *args): return _heasp.pha_rebinChannels(self, *args)
    def initChannels(self, *args): return _heasp.pha_initChannels(self, *args)
    def shiftChannels(self, *args): return _heasp.pha_shiftChannels(self, *args)
    def convertUnits(self, *args): return _heasp.pha_convertUnits(self, *args)
pha_swigregister = _heasp.pha_swigregister
pha_swigregister(pha)


def PHAtype(*args):
  return _heasp.PHAtype(*args)
PHAtype = _heasp.PHAtype

def IsPHAcounts(*args):
  return _heasp.IsPHAcounts(*args)
IsPHAcounts = _heasp.IsPHAcounts

def NumberofSpectra(*args):
  return _heasp.NumberofSpectra(*args)
NumberofSpectra = _heasp.NumberofSpectra
class phaII:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, phaII, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, phaII, name)
    __repr__ = _swig_repr
    __swig_setmethods__["phas"] = _heasp.phaII_phas_set
    __swig_getmethods__["phas"] = _heasp.phaII_phas_get
    def __init__(self): 
        this = _heasp.new_phaII()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_phaII
    __del__ = lambda self : None;
    def read(self, *args): return _heasp.phaII_read(self, *args)
    def get(self, *args): return _heasp.phaII_get(self, *args)
    def push(self, *args): return _heasp.phaII_push(self, *args)
    def NumberSpectra(self): return _heasp.phaII_NumberSpectra(self)
    def disp(self): return _heasp.phaII_disp(self)
    def clear(self): return _heasp.phaII_clear(self)
    def check(self): return _heasp.phaII_check(self)
    def write(self, *args): return _heasp.phaII_write(self, *args)
phaII_swigregister = _heasp.phaII_swigregister
phaII_swigregister(phaII)

class rmf:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rmf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rmf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FirstChannel"] = _heasp.rmf_FirstChannel_set
    __swig_getmethods__["FirstChannel"] = _heasp.rmf_FirstChannel_get
    __swig_setmethods__["NumberGroups"] = _heasp.rmf_NumberGroups_set
    __swig_getmethods__["NumberGroups"] = _heasp.rmf_NumberGroups_get
    __swig_setmethods__["FirstGroup"] = _heasp.rmf_FirstGroup_set
    __swig_getmethods__["FirstGroup"] = _heasp.rmf_FirstGroup_get
    __swig_setmethods__["FirstChannelGroup"] = _heasp.rmf_FirstChannelGroup_set
    __swig_getmethods__["FirstChannelGroup"] = _heasp.rmf_FirstChannelGroup_get
    __swig_setmethods__["NumberChannelsGroup"] = _heasp.rmf_NumberChannelsGroup_set
    __swig_getmethods__["NumberChannelsGroup"] = _heasp.rmf_NumberChannelsGroup_get
    __swig_setmethods__["FirstElement"] = _heasp.rmf_FirstElement_set
    __swig_getmethods__["FirstElement"] = _heasp.rmf_FirstElement_get
    __swig_setmethods__["OrderGroup"] = _heasp.rmf_OrderGroup_set
    __swig_getmethods__["OrderGroup"] = _heasp.rmf_OrderGroup_get
    __swig_setmethods__["LowEnergy"] = _heasp.rmf_LowEnergy_set
    __swig_getmethods__["LowEnergy"] = _heasp.rmf_LowEnergy_get
    __swig_setmethods__["HighEnergy"] = _heasp.rmf_HighEnergy_set
    __swig_getmethods__["HighEnergy"] = _heasp.rmf_HighEnergy_get
    __swig_setmethods__["Matrix"] = _heasp.rmf_Matrix_set
    __swig_getmethods__["Matrix"] = _heasp.rmf_Matrix_get
    __swig_setmethods__["ChannelLowEnergy"] = _heasp.rmf_ChannelLowEnergy_set
    __swig_getmethods__["ChannelLowEnergy"] = _heasp.rmf_ChannelLowEnergy_get
    __swig_setmethods__["ChannelHighEnergy"] = _heasp.rmf_ChannelHighEnergy_set
    __swig_getmethods__["ChannelHighEnergy"] = _heasp.rmf_ChannelHighEnergy_get
    __swig_setmethods__["AreaScaling"] = _heasp.rmf_AreaScaling_set
    __swig_getmethods__["AreaScaling"] = _heasp.rmf_AreaScaling_get
    __swig_setmethods__["ResponseThreshold"] = _heasp.rmf_ResponseThreshold_set
    __swig_getmethods__["ResponseThreshold"] = _heasp.rmf_ResponseThreshold_get
    __swig_setmethods__["EnergyUnits"] = _heasp.rmf_EnergyUnits_set
    __swig_getmethods__["EnergyUnits"] = _heasp.rmf_EnergyUnits_get
    __swig_setmethods__["RMFUnits"] = _heasp.rmf_RMFUnits_set
    __swig_getmethods__["RMFUnits"] = _heasp.rmf_RMFUnits_get
    __swig_setmethods__["ChannelType"] = _heasp.rmf_ChannelType_set
    __swig_getmethods__["ChannelType"] = _heasp.rmf_ChannelType_get
    __swig_setmethods__["RMFVersion"] = _heasp.rmf_RMFVersion_set
    __swig_getmethods__["RMFVersion"] = _heasp.rmf_RMFVersion_get
    __swig_setmethods__["EBDVersion"] = _heasp.rmf_EBDVersion_set
    __swig_getmethods__["EBDVersion"] = _heasp.rmf_EBDVersion_get
    __swig_setmethods__["Telescope"] = _heasp.rmf_Telescope_set
    __swig_getmethods__["Telescope"] = _heasp.rmf_Telescope_get
    __swig_setmethods__["Instrument"] = _heasp.rmf_Instrument_set
    __swig_getmethods__["Instrument"] = _heasp.rmf_Instrument_get
    __swig_setmethods__["Detector"] = _heasp.rmf_Detector_set
    __swig_getmethods__["Detector"] = _heasp.rmf_Detector_get
    __swig_setmethods__["Filter"] = _heasp.rmf_Filter_set
    __swig_getmethods__["Filter"] = _heasp.rmf_Filter_get
    __swig_setmethods__["RMFType"] = _heasp.rmf_RMFType_set
    __swig_getmethods__["RMFType"] = _heasp.rmf_RMFType_get
    __swig_setmethods__["RMFExtensionName"] = _heasp.rmf_RMFExtensionName_set
    __swig_getmethods__["RMFExtensionName"] = _heasp.rmf_RMFExtensionName_get
    __swig_setmethods__["EBDExtensionName"] = _heasp.rmf_EBDExtensionName_set
    __swig_getmethods__["EBDExtensionName"] = _heasp.rmf_EBDExtensionName_get
    def __init__(self): 
        this = _heasp.new_rmf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_rmf
    __del__ = lambda self : None;
    def read(self, *args): return _heasp.rmf_read(self, *args)
    def readMatrix(self, *args): return _heasp.rmf_readMatrix(self, *args)
    def readChannelBounds(self, *args): return _heasp.rmf_readChannelBounds(self, *args)
    def update(self): return _heasp.rmf_update(self)
    def initialize(self, *args): return _heasp.rmf_initialize(self, *args)
    def NumberChannels(self): return _heasp.rmf_NumberChannels(self)
    def NumberEnergyBins(self): return _heasp.rmf_NumberEnergyBins(self)
    def NumberTotalGroups(self): return _heasp.rmf_NumberTotalGroups(self)
    def NumberTotalElements(self): return _heasp.rmf_NumberTotalElements(self)
    def ElementValue(self, *args): return _heasp.rmf_ElementValue(self, *args)
    def RowValues(self, *args): return _heasp.rmf_RowValues(self, *args)
    def RandomChannels(self, *args): return _heasp.rmf_RandomChannels(self, *args)
    def disp(self): return _heasp.rmf_disp(self)
    def clear(self): return _heasp.rmf_clear(self)
    def clearMatrix(self): return _heasp.rmf_clearMatrix(self)
    def check(self): return _heasp.rmf_check(self)
    def normalize(self): return _heasp.rmf_normalize(self)
    def compress(self, *args): return _heasp.rmf_compress(self, *args)
    def rebinChannels(self, *args): return _heasp.rmf_rebinChannels(self, *args)
    def rebinEnergies(self, *args): return _heasp.rmf_rebinEnergies(self, *args)
    def shiftChannels(self, *args): return _heasp.rmf_shiftChannels(self, *args)
    def write(self, *args): return _heasp.rmf_write(self, *args)
    def writeMatrix(self, *args): return _heasp.rmf_writeMatrix(self, *args)
    def writeChannelBounds(self, *args): return _heasp.rmf_writeChannelBounds(self, *args)
    def __imul__(self, *args): return _heasp.rmf___imul__(self, *args)
    def __iadd__(self, *args): return _heasp.rmf___iadd__(self, *args)
    def checkCompatibility(self, *args): return _heasp.rmf_checkCompatibility(self, *args)
    def convertUnits(self): return _heasp.rmf_convertUnits(self)
    def reverseRows(self): return _heasp.rmf_reverseRows(self)
    def addRow(self, *args): return _heasp.rmf_addRow(self, *args)
rmf_swigregister = _heasp.rmf_swigregister
rmf_swigregister(rmf)


def calcGaussResp(*args):
  return _heasp.calcGaussResp(*args)
calcGaussResp = _heasp.calcGaussResp
class rmft:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rmft, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rmft, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FirstChannel"] = _heasp.rmft_FirstChannel_set
    __swig_getmethods__["FirstChannel"] = _heasp.rmft_FirstChannel_get
    __swig_setmethods__["NumberGroups"] = _heasp.rmft_NumberGroups_set
    __swig_getmethods__["NumberGroups"] = _heasp.rmft_NumberGroups_get
    __swig_setmethods__["FirstGroup"] = _heasp.rmft_FirstGroup_set
    __swig_getmethods__["FirstGroup"] = _heasp.rmft_FirstGroup_get
    __swig_setmethods__["FirstEnergyGroup"] = _heasp.rmft_FirstEnergyGroup_set
    __swig_getmethods__["FirstEnergyGroup"] = _heasp.rmft_FirstEnergyGroup_get
    __swig_setmethods__["NumberEnergiesGroup"] = _heasp.rmft_NumberEnergiesGroup_set
    __swig_getmethods__["NumberEnergiesGroup"] = _heasp.rmft_NumberEnergiesGroup_get
    __swig_setmethods__["FirstElement"] = _heasp.rmft_FirstElement_set
    __swig_getmethods__["FirstElement"] = _heasp.rmft_FirstElement_get
    __swig_setmethods__["OrderGroup"] = _heasp.rmft_OrderGroup_set
    __swig_getmethods__["OrderGroup"] = _heasp.rmft_OrderGroup_get
    __swig_setmethods__["LowEnergy"] = _heasp.rmft_LowEnergy_set
    __swig_getmethods__["LowEnergy"] = _heasp.rmft_LowEnergy_get
    __swig_setmethods__["HighEnergy"] = _heasp.rmft_HighEnergy_set
    __swig_getmethods__["HighEnergy"] = _heasp.rmft_HighEnergy_get
    __swig_setmethods__["Matrix"] = _heasp.rmft_Matrix_set
    __swig_getmethods__["Matrix"] = _heasp.rmft_Matrix_get
    __swig_setmethods__["ChannelLowEnergy"] = _heasp.rmft_ChannelLowEnergy_set
    __swig_getmethods__["ChannelLowEnergy"] = _heasp.rmft_ChannelLowEnergy_get
    __swig_setmethods__["ChannelHighEnergy"] = _heasp.rmft_ChannelHighEnergy_set
    __swig_getmethods__["ChannelHighEnergy"] = _heasp.rmft_ChannelHighEnergy_get
    __swig_setmethods__["AreaScaling"] = _heasp.rmft_AreaScaling_set
    __swig_getmethods__["AreaScaling"] = _heasp.rmft_AreaScaling_get
    __swig_setmethods__["ResponseThreshold"] = _heasp.rmft_ResponseThreshold_set
    __swig_getmethods__["ResponseThreshold"] = _heasp.rmft_ResponseThreshold_get
    __swig_setmethods__["ChannelType"] = _heasp.rmft_ChannelType_set
    __swig_getmethods__["ChannelType"] = _heasp.rmft_ChannelType_get
    __swig_setmethods__["RMFVersion"] = _heasp.rmft_RMFVersion_set
    __swig_getmethods__["RMFVersion"] = _heasp.rmft_RMFVersion_get
    __swig_setmethods__["EBDVersion"] = _heasp.rmft_EBDVersion_set
    __swig_getmethods__["EBDVersion"] = _heasp.rmft_EBDVersion_get
    __swig_setmethods__["Telescope"] = _heasp.rmft_Telescope_set
    __swig_getmethods__["Telescope"] = _heasp.rmft_Telescope_get
    __swig_setmethods__["Instrument"] = _heasp.rmft_Instrument_set
    __swig_getmethods__["Instrument"] = _heasp.rmft_Instrument_get
    __swig_setmethods__["Detector"] = _heasp.rmft_Detector_set
    __swig_getmethods__["Detector"] = _heasp.rmft_Detector_get
    __swig_setmethods__["Filter"] = _heasp.rmft_Filter_set
    __swig_getmethods__["Filter"] = _heasp.rmft_Filter_get
    __swig_setmethods__["RMFType"] = _heasp.rmft_RMFType_set
    __swig_getmethods__["RMFType"] = _heasp.rmft_RMFType_get
    __swig_setmethods__["RMFExtensionName"] = _heasp.rmft_RMFExtensionName_set
    __swig_getmethods__["RMFExtensionName"] = _heasp.rmft_RMFExtensionName_get
    __swig_setmethods__["EBDExtensionName"] = _heasp.rmft_EBDExtensionName_set
    __swig_getmethods__["EBDExtensionName"] = _heasp.rmft_EBDExtensionName_get
    def __init__(self): 
        this = _heasp.new_rmft()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_rmft
    __del__ = lambda self : None;
    def load(self, *args): return _heasp.rmft_load(self, *args)
    def update(self): return _heasp.rmft_update(self)
    def NumberChannels(self): return _heasp.rmft_NumberChannels(self)
    def NumberEnergyBins(self): return _heasp.rmft_NumberEnergyBins(self)
    def NumberTotalGroups(self): return _heasp.rmft_NumberTotalGroups(self)
    def NumberTotalElements(self): return _heasp.rmft_NumberTotalElements(self)
    def ElementValue(self, *args): return _heasp.rmft_ElementValue(self, *args)
    def RowValues(self, *args): return _heasp.rmft_RowValues(self, *args)
    def disp(self): return _heasp.rmft_disp(self)
    def clear(self): return _heasp.rmft_clear(self)
rmft_swigregister = _heasp.rmft_swigregister
rmft_swigregister(rmft)

class arf:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LowEnergy"] = _heasp.arf_LowEnergy_set
    __swig_getmethods__["LowEnergy"] = _heasp.arf_LowEnergy_get
    __swig_setmethods__["HighEnergy"] = _heasp.arf_HighEnergy_set
    __swig_getmethods__["HighEnergy"] = _heasp.arf_HighEnergy_get
    __swig_setmethods__["EffArea"] = _heasp.arf_EffArea_set
    __swig_getmethods__["EffArea"] = _heasp.arf_EffArea_get
    __swig_setmethods__["EnergyUnits"] = _heasp.arf_EnergyUnits_set
    __swig_getmethods__["EnergyUnits"] = _heasp.arf_EnergyUnits_get
    __swig_setmethods__["arfUnits"] = _heasp.arf_arfUnits_set
    __swig_getmethods__["arfUnits"] = _heasp.arf_arfUnits_get
    __swig_setmethods__["Version"] = _heasp.arf_Version_set
    __swig_getmethods__["Version"] = _heasp.arf_Version_get
    __swig_setmethods__["Telescope"] = _heasp.arf_Telescope_set
    __swig_getmethods__["Telescope"] = _heasp.arf_Telescope_get
    __swig_setmethods__["Instrument"] = _heasp.arf_Instrument_set
    __swig_getmethods__["Instrument"] = _heasp.arf_Instrument_get
    __swig_setmethods__["Detector"] = _heasp.arf_Detector_set
    __swig_getmethods__["Detector"] = _heasp.arf_Detector_get
    __swig_setmethods__["Filter"] = _heasp.arf_Filter_set
    __swig_getmethods__["Filter"] = _heasp.arf_Filter_get
    __swig_setmethods__["ExtensionName"] = _heasp.arf_ExtensionName_set
    __swig_getmethods__["ExtensionName"] = _heasp.arf_ExtensionName_get
    def __init__(self): 
        this = _heasp.new_arf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_arf
    __del__ = lambda self : None;
    def read(self, *args): return _heasp.arf_read(self, *args)
    def NumberEnergyBins(self): return _heasp.arf_NumberEnergyBins(self)
    def disp(self): return _heasp.arf_disp(self)
    def clear(self): return _heasp.arf_clear(self)
    def check(self): return _heasp.arf_check(self)
    def write(self, *args): return _heasp.arf_write(self, *args)
    def __iadd__(self, *args): return _heasp.arf___iadd__(self, *args)
    def checkCompatibility(self, *args): return _heasp.arf_checkCompatibility(self, *args)
    def convertUnits(self): return _heasp.arf_convertUnits(self)
    def initChannels(self, *args): return _heasp.arf_initChannels(self, *args)
arf_swigregister = _heasp.arf_swigregister
arf_swigregister(arf)

class arfII:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, arfII, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, arfII, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arfs"] = _heasp.arfII_arfs_set
    __swig_getmethods__["arfs"] = _heasp.arfII_arfs_get
    def __init__(self): 
        this = _heasp.new_arfII()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_arfII
    __del__ = lambda self : None;
    def read(self, *args): return _heasp.arfII_read(self, *args)
    def get(self, *args): return _heasp.arfII_get(self, *args)
    def push(self, *args): return _heasp.arfII_push(self, *args)
    def NumberARFs(self): return _heasp.arfII_NumberARFs(self)
    def disp(self): return _heasp.arfII_disp(self)
    def clear(self): return _heasp.arfII_clear(self)
    def check(self): return _heasp.arfII_check(self)
    def write(self, *args): return _heasp.arfII_write(self, *args)
arfII_swigregister = _heasp.arfII_swigregister
arfII_swigregister(arfII)

class grouping:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, grouping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, grouping, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flag"] = _heasp.grouping_flag_set
    __swig_getmethods__["flag"] = _heasp.grouping_flag_get
    def __init__(self, *args): 
        this = _heasp.new_grouping(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_grouping
    __del__ = lambda self : None;
    def disp(self): return _heasp.grouping_disp(self)
    def clear(self): return _heasp.grouping_clear(self)
    def read(self, *args): return _heasp.grouping_read(self, *args)
    def load(self, *args): return _heasp.grouping_load(self, *args)
    def newBin(self, *args): return _heasp.grouping_newBin(self, *args)
    def size(self): return _heasp.grouping_size(self)
grouping_swigregister = _heasp.grouping_swigregister
grouping_swigregister(grouping)

SumMode = _heasp.SumMode
SumQuadMode = _heasp.SumQuadMode
MeanMode = _heasp.MeanMode
FirstEltMode = _heasp.FirstEltMode
LastEltMode = _heasp.LastEltMode

def ReadBinFactors(*args):
  return _heasp.ReadBinFactors(*args)
ReadBinFactors = _heasp.ReadBinFactors
class tableParameter:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tableParameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tableParameter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Name"] = _heasp.tableParameter_Name_set
    __swig_getmethods__["Name"] = _heasp.tableParameter_Name_get
    __swig_setmethods__["InterpolationMethod"] = _heasp.tableParameter_InterpolationMethod_set
    __swig_getmethods__["InterpolationMethod"] = _heasp.tableParameter_InterpolationMethod_get
    __swig_setmethods__["InitialValue"] = _heasp.tableParameter_InitialValue_set
    __swig_getmethods__["InitialValue"] = _heasp.tableParameter_InitialValue_get
    __swig_setmethods__["Delta"] = _heasp.tableParameter_Delta_set
    __swig_getmethods__["Delta"] = _heasp.tableParameter_Delta_get
    __swig_setmethods__["Minimum"] = _heasp.tableParameter_Minimum_set
    __swig_getmethods__["Minimum"] = _heasp.tableParameter_Minimum_get
    __swig_setmethods__["Bottom"] = _heasp.tableParameter_Bottom_set
    __swig_getmethods__["Bottom"] = _heasp.tableParameter_Bottom_get
    __swig_setmethods__["Top"] = _heasp.tableParameter_Top_set
    __swig_getmethods__["Top"] = _heasp.tableParameter_Top_get
    __swig_setmethods__["Maximum"] = _heasp.tableParameter_Maximum_set
    __swig_getmethods__["Maximum"] = _heasp.tableParameter_Maximum_get
    __swig_setmethods__["TabulatedValues"] = _heasp.tableParameter_TabulatedValues_set
    __swig_getmethods__["TabulatedValues"] = _heasp.tableParameter_TabulatedValues_get
    def __init__(self): 
        this = _heasp.new_tableParameter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_tableParameter
    __del__ = lambda self : None;
    def disp(self): return _heasp.tableParameter_disp(self)
    def clear(self): return _heasp.tableParameter_clear(self)
tableParameter_swigregister = _heasp.tableParameter_swigregister
tableParameter_swigregister(tableParameter)

class tableSpectrum:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tableSpectrum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tableSpectrum, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Flux"] = _heasp.tableSpectrum_Flux_set
    __swig_getmethods__["Flux"] = _heasp.tableSpectrum_Flux_get
    __swig_setmethods__["ParameterValues"] = _heasp.tableSpectrum_ParameterValues_set
    __swig_getmethods__["ParameterValues"] = _heasp.tableSpectrum_ParameterValues_get
    __swig_setmethods__["addFlux"] = _heasp.tableSpectrum_addFlux_set
    __swig_getmethods__["addFlux"] = _heasp.tableSpectrum_addFlux_get
    def __init__(self): 
        this = _heasp.new_tableSpectrum()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_tableSpectrum
    __del__ = lambda self : None;
    def pushaddFlux(self, *args): return _heasp.tableSpectrum_pushaddFlux(self, *args)
    def getaddFlux(self, *args): return _heasp.tableSpectrum_getaddFlux(self, *args)
    def disp(self): return _heasp.tableSpectrum_disp(self)
    def clear(self): return _heasp.tableSpectrum_clear(self)
tableSpectrum_swigregister = _heasp.tableSpectrum_swigregister
tableSpectrum_swigregister(tableSpectrum)

class table:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Parameters"] = _heasp.table_Parameters_set
    __swig_getmethods__["Parameters"] = _heasp.table_Parameters_get
    __swig_setmethods__["Spectra"] = _heasp.table_Spectra_set
    __swig_getmethods__["Spectra"] = _heasp.table_Spectra_get
    __swig_setmethods__["ModelName"] = _heasp.table_ModelName_set
    __swig_getmethods__["ModelName"] = _heasp.table_ModelName_get
    __swig_setmethods__["ModelUnits"] = _heasp.table_ModelUnits_set
    __swig_getmethods__["ModelUnits"] = _heasp.table_ModelUnits_get
    __swig_setmethods__["NumIntParams"] = _heasp.table_NumIntParams_set
    __swig_getmethods__["NumIntParams"] = _heasp.table_NumIntParams_get
    __swig_setmethods__["NumAddParams"] = _heasp.table_NumAddParams_set
    __swig_getmethods__["NumAddParams"] = _heasp.table_NumAddParams_get
    __swig_setmethods__["isError"] = _heasp.table_isError_set
    __swig_getmethods__["isError"] = _heasp.table_isError_get
    __swig_setmethods__["isRedshift"] = _heasp.table_isRedshift_set
    __swig_getmethods__["isRedshift"] = _heasp.table_isRedshift_get
    __swig_setmethods__["isAdditive"] = _heasp.table_isAdditive_set
    __swig_getmethods__["isAdditive"] = _heasp.table_isAdditive_get
    __swig_setmethods__["Energies"] = _heasp.table_Energies_set
    __swig_getmethods__["Energies"] = _heasp.table_Energies_get
    __swig_setmethods__["EnergyUnits"] = _heasp.table_EnergyUnits_set
    __swig_getmethods__["EnergyUnits"] = _heasp.table_EnergyUnits_get
    def __init__(self): 
        this = _heasp.new_table()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _heasp.delete_table
    __del__ = lambda self : None;
    def read(self, *args): return _heasp.table_read(self, *args)
    def pushParameter(self, *args): return _heasp.table_pushParameter(self, *args)
    def pushSpectrum(self, *args): return _heasp.table_pushSpectrum(self, *args)
    def getParameter(self, *args): return _heasp.table_getParameter(self, *args)
    def getSpectrum(self, *args): return _heasp.table_getSpectrum(self, *args)
    def disp(self): return _heasp.table_disp(self)
    def clear(self): return _heasp.table_clear(self)
    def check(self): return _heasp.table_check(self)
    def convertUnits(self): return _heasp.table_convertUnits(self)
    def reverseRows(self): return _heasp.table_reverseRows(self)
    def write(self, *args): return _heasp.table_write(self, *args)
table_swigregister = _heasp.table_swigregister
table_swigregister(table)



